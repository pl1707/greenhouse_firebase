#include <WiFi.h>
#include <FirebaseESP32.h>

#define FIREBASE_HOST ""
#define FIREBASE_API_KEY ""
#define WIFI_SSID ""
#define WIFI_PASSWORD ""
#define USER_EMAIL ""
#define USER_PASSWORD ""

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng Firebase
FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

// C·∫•u h√¨nh UART cho giao ti·∫øp v·ªõi STM32
#define RXD2 16  // Ch√¢n RX c·ªßa ESP32 n·ªëi v·ªõi TX c·ªßa STM32
#define TXD2 17  // Ch√¢n TX c·ªßa ESP32 n·ªëi v·ªõi RX c·ªßa STM32

void setup() {
    Serial.begin(115200);        // Serial ch√≠nh ƒë·ªÉ debug
    Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); // Serial2 cho STM32, baud rate 9600

    // K·∫øt n·ªëi WiFi
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to WiFi");
    unsigned long wifiTimeout = millis() + 10000;
    while (WiFi.status() != WL_CONNECTED && millis() < wifiTimeout) {
        Serial.print(".");
        delay(500);
    }
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("\n‚ùå WiFi Connection Failed!");
        return;
    }
    Serial.println("\n‚úÖ Connected to WiFi!");

    // C·∫•u h√¨nh Firebase
    config.host = FIREBASE_HOST;
    config.api_key = FIREBASE_API_KEY;
    auth.user.email = USER_EMAIL;
    auth.user.password = USER_PASSWORD;

    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);

    Serial.println("Connecting to Firebase...");
    unsigned long authTimeout = millis() + 10000;
    while (!Firebase.ready() && millis() < authTimeout) {
        Serial.print(".");
        delay(1000);
    }
    if (!Firebase.ready()) {
        Serial.println("\n‚ùå Firebase Connection Failed!");
        return;
    }
    Serial.println("\n‚úÖ Connected to Firebase!");
}

void loop() {
    static unsigned long lastMillis = 0;
    if (millis() - lastMillis > 5000 && Firebase.ready()) {
        lastMillis = millis();

        // 1. Nh·∫≠n d·ªØ li·ªáu t·ª´ STM32 qua UART
        if (Serial2.available()) {
            String dataFromSTM32 = Serial2.readStringUntil('\n');
            Serial.println("üì• Received from STM32: " + dataFromSTM32);

            // Ph√¢n t√≠ch d·ªØ li·ªáu: "T:25C H:60% M:45%"
            int temp = parseValue(dataFromSTM32, "T:", "C");
            int humi = parseValue(dataFromSTM32, "H:", "%");
            int soil = parseValue(dataFromSTM32, "M:", "%");

            // 2. G·ª≠i d·ªØ li·ªáu l√™n Firebase
            sendToFirebase("/gardens/SG-01/devices/temp_sensor/value", temp);
            sendToFirebase("/gardens/SG-01/devices/humi_sensor/value", humi);
            sendToFirebase("/gardens/SG-01/devices/soil_sensor/value", soil);
        }

        // 3. Nh·∫≠n l·ªánh t·ª´ Firebase
        bool pumpState = getFromFirebase("/gardens/SG-01/devices/pump/status");
        bool ledState = getFromFirebase("/gardens/SG-01/devices/led/status");

        // 4. G·ª≠i l·ªánh xu·ªëng STM32 qua UART
        String command = "PUMP:" + String(pumpState ? "ON" : "OFF") + ",LED:" + String(ledState ? "ON" : "OFF") + "\r\n";
        Serial2.print(command);
        Serial.println("üì§ Sent to STM32: " + command);
    }
}

// H√†m ph√¢n t√≠ch gi√° tr·ªã t·ª´ chu·ªói d·ªØ li·ªáu STM32
int parseValue(String data, String key, String unit) {
    int startIndex = data.indexOf(key) + key.length();
    int endIndex = data.indexOf(unit, startIndex);
    if (startIndex == -1 || endIndex == -1) return 0; // Tr·∫£ v·ªÅ 0 n·∫øu kh√¥ng t√¨m th·∫•y
    String valueStr = data.substring(startIndex, endIndex);
    return valueStr.toInt();
}

// H√†m g·ª≠i d·ªØ li·ªáu l√™n Firebase
void sendToFirebase(String path, int value) {
    if (Firebase.setInt(firebaseData, path, value)) {
        Serial.println("‚úÖ Sent to Firebase: " + path + " = " + String(value));
    } else {
        Serial.println("‚ùå Failed to send to Firebase: " + firebaseData.errorReason());
    }
}

// H√†m nh·∫≠n d·ªØ li·ªáu t·ª´ Firebase
bool getFromFirebase(String path) {
    if (Firebase.getBool(firebaseData, path)) {
        bool value = firebaseData.boolData();
        Serial.println("üì• Received from Firebase: " + path + " = " + String(value));
        return value;
    } else {
        Serial.println("‚ùå Failed to get from Firebase: " + firebaseData.errorReason());
        return false; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu l·ªói
    }
}